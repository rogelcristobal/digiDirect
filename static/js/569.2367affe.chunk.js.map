{"version":3,"file":"static/js/569.2367affe.chunk.js","mappings":"2IA4GA,UA1GkB,WAyDhB,OACE,+BAwCE,SAAC,IAAD,CAAKA,UAAU,yEAAf,UACE,SAAC,IAAD,CAAKA,UAAU,qBAItB,C","sources":["pages/Converter.jsx"],"sourcesContent":["import { Box, Typography } from \"@mui/material\";\r\n\r\nconst Converter = () => {\r\n  // const { handleScroll } = useContext(NavScrollContext);\r\n  // const scrollRef = useRef(null);\r\n  // const importFile = useRef(null);\r\n  // const [importedFiles, setImportedFiles] = useState();\r\n\r\n  // const [URLInput, setURLInput] = useState([{ input: \"\" }]);\r\n\r\n  // const handleAddURL = () => {\r\n  //   setURLInput([...URLInput, { input: \"\" }]);\r\n  // };\r\n  // const handleTextChange = (e, id) => {\r\n  //   console.log(e, id);\r\n  // };\r\n  // const handleChooseFile = () => {\r\n  //   importFile.current.click();\r\n  // };\r\n  // const inputFileOnChange = (e) => {\r\n  //   setImportedFiles(e.target.files);\r\n  // };\r\n  // console.log(typeof importedFiles, importedFiles);\r\n  // const { mutate, state } = useImportFromURL();\r\n  // const { mutate: startConvert, state: convertStatus } = useConvert();\r\n\r\n  // console.log(\"import\", state);\r\n  // console.log(\"convertStatus\", convertStatus);\r\n  // const [converterValue, setConverterValue] = useState(0);\r\n  // const handleInputChange = (e) => {\r\n  //   setConverterValue((prev) => (prev = e.target.value));\r\n  // };\r\n\r\n  // inview hook / section refs\r\n  // const pageRef = useRef([]); //setting pageref as an empty array for multiple refs\r\n  // pageRef.current = [];\r\n\r\n  // const storeRefs=(el)=>{\r\n  //   if(el&& !pageRef.current.includes(el)){  // checks if pageRef does not have the current element\r\n  //     pageRef.current.push(el) // pushing new element to the ref array\r\n  //   }\r\n  // }\r\n\r\n  // const [unitConverterRef,unitConverterInView] = useInView()\r\n  // const [imageConverterRef,imageConverterInView] = useInView()\r\n\r\n  // const sections = [\r\n  //   {\r\n  //     refView: unitConverterRef,\r\n  //     isInView: unitConverterInView,\r\n  //     category: \"Unit converter\",\r\n  //   },\r\n  //   {\r\n  //     refView: imageConverterRef,\r\n  //     isInView: imageConverterInView,\r\n  //     category: \"Image converter\",\r\n  //   },\r\n  // ];\r\n\r\n  return (\r\n    <>\r\n      {/* <Box className=\"w-[24rem]   h-full  sticky top-0 px-0 box-border  flex flex-col justify-start pb-8 pt-4 items-center \">\r\n        <Box\r\n          className=\"h-fit   mt-10   w-full box-border py-2 px-8  flex flex-col items-end justify-start \r\n        \"\r\n        >\r\n          <Box className=\"flex  flex-col  max-w-[calc(24rem-10rem)] box-border   px-4 items-center justify-start h-full  w-full space-y-4 relative \">\r\n            <Box className=\" w-full flex items-center justify-end py-2  box-border\">\r\n              <TextContent\r\n                title={\r\n                  <Typography className=\"text-white\">API tools</Typography>\r\n                }\r\n              ></TextContent>\r\n            </Box>\r\n            {sections.map((item, id) => (\r\n              <Link\r\n                key={id}\r\n                underline=\"none\"\r\n                // onClick={() => {\r\n                //   pageCategoryRef.current[id].scrollIntoView({\r\n                //     behavior: \"smooth\",\r\n                //     block: \"start\",\r\n                //   });\r\n                // }}\r\n                className={` text-[0.9rem] relative  text-right w-full cursor-pointer ${\r\n                  item?.isInView ? \"text-white\" : \"text-gray-600\"\r\n                }\r\n                 hover:text-gray-400 transition-all duration-500 ease-in-out \r\n                flex items-center justify-center `}\r\n              >\r\n                <span className=\"text-right w-full overflow-x-hidden \">\r\n                  {item.category}\r\n                </span>\r\n              </Link>\r\n            ))}\r\n          </Box>\r\n        </Box>\r\n      </Box> */}\r\n\r\n      {/* maincontent */}\r\n      <Box className=\"flex flex-col items-start justify-start w-full  h-full  box-border p-3\">\r\n        <Box className=\"h-full w-full\"></Box>\r\n      </Box>\r\n    </>\r\n  );\r\n};\r\n// https://codingbeautydev.com/blog/material-ui-tabs/\r\n// https://app.haikei.app/\r\nexport default Converter;\r\n\r\n{\r\n  /*  */\r\n}\r\n\r\n{\r\n  /* URLInput[].text*/\r\n}\r\n{\r\n  /* {URLInput.map((item, idx) => (\r\n                <Tooltip key={idx} title={\"URL text field\"}>\r\n                <input\r\n                name=\"url_input\"\r\n                value={item.input}\r\n                onChange={(e) => {\r\n                  const list = [...URLInput];\r\n                  list[idx].input = e.target.value;\r\n                  setURLInput(list);\r\n                }}\r\n                type=\"text\"\r\n                className=\"h-8 w-96 rounded-lg border-0 outline-none bg-gray-100 hover:cursor-pointer focus:cursor-text px-4 py-2 text-md font-general font-medium text-gray-400 focus:text-gray-900\"\r\n                />\r\n                </Tooltip>\r\n              ))} */\r\n}\r\n{\r\n  /* {!importedFiles ? (\r\n                  \r\n                   \r\n                  <Box\r\n                    onClick={handleChooseFile}\r\n                    className=\"max-w-[40rem] py-4 px-4 w-full  h-52 border-dashed border-[2px] border-blue-200 flex flex-col items-end justify-end rounded-xl relative cursor-pointer\"\r\n                  >\r\n                    <input\r\n                      type=\"file\"\r\n                      ref={importFile}\r\n                      onChange={inputFileOnChange}\r\n                      className=\"invisible\"\r\n                      multiple\r\n                    />\r\n                    <Box className=\"absolute -translate-x-1/2 top-1/2 left-1/2 text-blue-200 -translate-y-1/2 text-5xl\">\r\n                      <AiOutlineFileImage />\r\n                    </Box>\r\n                  </Box>\r\n                ) : (\r\n                  <Box className=\"h-fit p-4 box-border   w-full  flex flex-col items-center justify-start relative cursor-pointer\">\r\n                    {\r\n                      importedFiles && Object.keys(importedFiles).map((item,idx)=>(\r\n                        <Box key={idx} className=\"h-16 w-full border-thiner rounded-lg   flex  box-border items-center justify-between px-6 \">\r\n                          <Box className=\" max-w-[20rem]   w-full box-border \">\r\n                            <Typography variant=\"body1\" className=\"hover:text-clip truncate font-medium text-sm text-gray-600\">{importedFiles[item].name}</Typography>\r\n                          </Box>\r\n                          <Box className=\"h-full box-border flex items-center\">\r\n                            <Button endIcon={<HiChevronDown/>} variant=\"contained\" className=\"rounded-lg shadow-none text-gray-400 bg-[#f7f7f9] text-sm capitalize\">\r\n                              select\r\n                            </Button>\r\n                          </Box>\r\n                        </Box>\r\n                      ))\r\n                    }\r\n\r\n                  </Box>\r\n                 )} \r\n                <Box className=\"h-fit w-full max-w-[40rem] mt-2 flex items-center justify-end space-x-3  box-border\">\r\n                \r\n                  <Button\r\n                    startIcon={<AiOutlineLink className=\"text-blue-500\" />}\r\n                    variant=\"contained\"\r\n                    className=\"px-6 py-2 bg-blue-100 shadow-none  rounded-lg \"\r\n                  >\r\n                    <Typography\r\n                      variant=\"body1\"\r\n                      className=\"font-medium text-xs text-blue-500 capitalize\"\r\n                    >\r\n                      From Web\r\n                    </Typography>\r\n                  </Button>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    className=\"px-6 py-2 bg-blue-500 shadow-none  rounded-lg \"\r\n                  >\r\n                    <Typography\r\n                      variant=\"body1\"\r\n                      className=\" text-xs text-white capitalize\"\r\n                    >\r\n                      Convert\r\n                    </Typography>\r\n                  </Button>\r\n                </Box> */\r\n}\r\n"],"names":["className"],"sourceRoot":""}